/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dialogs;

import gui.HelperFrame;
import java.awt.Image;
import java.awt.event.MouseEvent;
import java.io.File;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import main.AsyncTask;
import main.Event;
import service.ControllerDB;
import service.SerializeController;

/**
 *
 * @author Alexandru
 */
public class DBDialog extends javax.swing.JDialog {
    private final static int STANDARD_LIST_WIDTH = 262;    
    private DefaultListModel<String> model;
    private HashMap<String, File> map;
    private boolean changed = false;
    private Image img;
    /**
     * 
     * Creates new form DBDialog
     */
    public DBDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        model = new DefaultListModel<>();
        map = new HashMap<>();
        
        File file = new File(ControllerDB.DATE_SALVATE_PATH);
        
        try {
           
            for (File f : file.listFiles()){
                String name = f.getName().substring(0, f.getName().length() - 4);
                map.put(name, f);
                model.addElement(name);
            }
        } catch(Exception e) {}
        
        jMenuItem1.setText("Incarca");
        jMenuItem3.setText("Modifica denumirea");
        jMenuItem2.setText("Sterge");
        
        jList1.setFixedCellWidth(STANDARD_LIST_WIDTH);
        jList1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jList1.setModel(model);
        
        ImageIcon icon = new ImageIcon("./res/loading.gif-c200");
        img = icon.getImage();
        img = img.getScaledInstance(15, 15, Image.SCALE_FAST);
        
        setResizable(false);
        setLocationRelativeTo(parent);
    }
    
    public boolean isChanged () {
        return this.changed;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();

        jMenuItem1.setText("jMenuItem1");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        jMenuItem3.setText("jMenuItem3");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem3);

        jMenuItem2.setText("jMenuItem2");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem2);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jList1MouseEntered(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jButton1.setText("<< Iesire");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addGap(0, 11, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        if (jList1.getSelectedValue() == null) return;
        
        if (evt.getButton() == MouseEvent.BUTTON3) {
            jPopupMenu1.show(this, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jList1MouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        int input = JOptionPane.showConfirmDialog(this, "<html>In cazul in care baza de date actuala nu este salvata, <br>"
                + "datele din ea se vor pierde definitiv. Continui? </html>", "Atentionare", 
                JOptionPane.WARNING_MESSAGE, JOptionPane.YES_NO_CANCEL_OPTION);
        
        
        
        if (input == JOptionPane.YES_OPTION) {
            jButton1.setIcon(new ImageIcon(img));
            setEnabled(false);
            
            new AsyncTask(new Event() {
                @Override
                public void doAction() {
                    loadDB();
                }
            }, new Event() {
                @Override
                public void doAction() {
                    jButton1.setIcon(null);
                    setEnabled(true);
                } 
            }).execute();
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void loadDB () {
        final File selected = map.get((String) jList1.getSelectedValue());
        try {
            if (selected.length() == 0) {
                JOptionPane.showMessageDialog(this, "Fisierul este alterat", "Eroare", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }catch (Exception e) {
            JOptionPane.showMessageDialog(null, "<html>Fisierul nu a putut fi citit.<br>Asigura-te ca folderul aplicatiei se afla intr-o locatie<br>fara restrictii de citire/scriere. </html>", "Eroare de securitate", JOptionPane.ERROR_MESSAGE);
            return;
        }
        boolean rez = ControllerDB.getInstance().dropDB();
        changed = true;
            if (!rez) {
                JOptionPane.showMessageDialog(this, "O eroare a survenit la incarcarea datelor");
                return;
            }
            
            SerializeController.getInstance().salveazaSerii(null); // stergem seriile arhivate 
            SerializeController.getInstance().serializaDistribuieProgramFrame(null);
            SerializeController.getInstance().serializeAdaugaInformatiiFrame(null);
            SerializeController.getInstance().serializeDistribuieEchipeFrame(null);
            SerializeController.getInstance().serializeSerieActivaFrame(null);
            SerializeController.getInstance().serializeazaPostareProgramFrame(null);
            ControllerDB.getInstance().setLastSerie(null);
            
            
            
            try {
                ControllerDB.getInstance().uploadDB(selected.getCanonicalPath());
            } catch (Exception ex) {
                Logger.getLogger(DBDialog.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "O eroare a survenit la incarcarea datelor");                
            }
            
            JOptionPane.showMessageDialog(this, "Succes!");
    }
    
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        final File selected = map.get((String) jList1.getSelectedValue());
        
        int input = JOptionPane.showConfirmDialog(this, "<html>Fisierl va fi sters definitiv. Continui? </html>", "Atentionare", 
                JOptionPane.WARNING_MESSAGE, JOptionPane.YES_NO_CANCEL_OPTION);
        
        if (input != JOptionPane.YES_OPTION) return;
        
        if (selected.delete()) {
            model.removeElement((String) jList1.getSelectedValue());
            map.remove((String) jList1.getSelectedValue());
            jList1.setModel(model);
        } else {
            JOptionPane.showMessageDialog(this, "O eroare a survenit la stergerea fisierului");  
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jList1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseEntered
        HelperFrame.getInstance().post(
                "Lista bazelor de date salvate",
                "Fiecare fisier din lista reprezinta o baza de data salvata anterior. Numele fisierului este alcatuit din data si ora la care"
                        + " acesta a fost creat. Pentru mai multe optiuni, click-dreapta pe fisierul dorit.");
    }//GEN-LAST:event_jList1MouseEntered

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        final String key = (String) jList1.getSelectedValue();
        final File selected = map.get(key);
        
        if (selected == null) return;
        
        String input = JOptionPane.showInputDialog(this, "Introdu noul nume: ", key);
        if (input == null || input.equals("")) {
            return;
        }
        
        File newFile = new File(ControllerDB.DATE_SALVATE_PATH + "/" + input + ".sql");
        
        if (newFile.exists()) {
            JOptionPane.showMessageDialog(this, "Exista deja un fisier cu acest nume", "Duplicat", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (!selected.renameTo(newFile)) return;
        
        map.remove(key);
        map.put(input, newFile);
        int index = model.indexOf(key);
        model.add(index, input);
        model.remove(index+1);
        jList1.setModel(model);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JList jList1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
