/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import db.ActivitateDB;
import db.EchipaDB;
import db.JocDB;
import dto.ActivitateDTO;
import dto.AnimatorDTO;
import dto.EchipaDTO;
import dto.JocDTO;
import java.awt.Color;
import java.awt.Component;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import service.ControllerDB;
import service.SerializeController;

/**
 *
 * @author Alexandru
 */
public class EchipeCompleteFrame extends javax.swing.JFrame {
    private final static int STANDARD_WEIGHT = 268;
    private final AnimatorDTO animator;
    private final DefaultListModel<EchipaDTO> model;
    private final Object sarcina;
    private List<EchipaDTO> echipe; // care nu au realizat activitatea
    private List<EchipaDB> echipeAbsente;
    private Date data;
    /**
     * Creates new form EchipeCompleteFrame
     * @param sarcina
     * @param animator
     * @param data
     * @throws java.lang.Exception
     */
    public EchipeCompleteFrame(Object sarcina, AnimatorDTO animator, Date data) throws Exception {
        initComponents();
        this.sarcina = sarcina;
        this.animator = animator;
        this.data = data;
        
        model = new DefaultListModel<>();
        echipeAbsente = new ArrayList<>();
                
        if (!(sarcina.getClass() == ActivitateDTO.class || sarcina.getClass() == JocDTO.class)){
            JOptionPane.showMessageDialog(this, "O eroare a aparut la incarcarea echipelor. Va rugam sa reincercati.", "", JOptionPane.ERROR_MESSAGE);
            throw new Exception("Obiect necorespunzator");
        }
        
        setTitle (sarcina.getClass() == ActivitateDTO.class ? ((ActivitateDTO) sarcina).toString() : ((JocDTO) sarcina).toString());
        
        if (sarcina.getClass() == ActivitateDTO.class) {
            ActivitateDTO activitate = (ActivitateDTO) sarcina;
            List<ActivitateDB> activitati = ControllerDB.getInstance().getStoredActivitateByIdProgram(
                    activitate.getPerioada(),
                    ControllerDB.getInstance().convert(activitate.getActivitateGenerala()),
                    SerializeController.getInstance().getProgramActivitatiID());
            
            echipe = new ArrayList<>(activitate.getEchipe());
            
            for (ActivitateDB adb : activitati) {
                for (int i = 0; i < echipe.size(); ++i) {
                    if (adb.getEchipaidEchipa().getIdEchipa() == echipe.get(i).getId() &&
                            adb.getOrganizator().contains("*" + animator.getNumeAnimator())) {
                        echipe.remove(i);
                        i = echipe.size(); // am gasit echipa cautata, alta la fel nu are cum sa fie
                    }
                }
            } 
            
            for (EchipaDTO e : activitate.getEchipe()) {
                model.addElement(e);
            }
        } else {
            JocDTO joc = (JocDTO) sarcina;
            List<JocDB> jocuri = ControllerDB.getInstance().getStoredJocByIdProgram(
                    joc.getPerioada(),
                    ControllerDB.getInstance().convert(joc.getJocGeneral()),
                    SerializeController.getInstance().getProgramActivitatiID());
            
            echipe = new ArrayList<>(joc.getEchipe());
            
            for (JocDB jdb : jocuri) {
                if (jdb.getAbsent()) {
                    echipeAbsente.add(jdb.getEchipaidEchipa());
                }
                
                for (int i = 0; i < echipe.size(); ++i) {
                    if (jdb.getEchipaidEchipa().getIdEchipa() == echipe.get(i).getId()
                            && jdb.getOrganizator().contains("*" + animator.getNumeAnimator())) {
                        echipe.remove(i);
                        i = echipe.size();
                    }
                }
            }
            
            for (EchipaDTO e : joc.getEchipe()) {
                model.addElement(e);
            }
        }
        
        jList1.setModel(model);
        jList1.setFixedCellWidth(STANDARD_WEIGHT);
        jList1.setCellRenderer(new CellRenderer());
        
        setLocationRelativeTo(null);
        setResizable(false);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jList1MouseEntered(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jButton1.setText("<< Iesire");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jList1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseEntered
        HelperFrame.getInstance().post(
                "Echipe participante la activitatea selectata",
                "Aici sunt afisate toate echipele care au in program activitatea selectata. In functie de culoarea echipei, putem "
                        + "afla urmatoarele inforamtii: \n"
                        + " *alb - echipa inca nu a finalizat activitatea cu animatorul selectat;"
                        + " *verde - echipa a terminat activitatea cu acest animator;"
                        + " *rosu - echipa a fost trecuta ca si absenta la aceast joc;");
    }//GEN-LAST:event_jList1MouseEntered


    private class CellRenderer extends DefaultListCellRenderer {
        private final Color HIGH_VALUE_FG = Color.white;
        private final Color HIGH_VALUE_BG = Color.getHSBColor((float) 0.375, (float) 0.711, (float) 0.882);
        private final Color STANDARD_VALUE_FG = Color.BLACK;
        private final Color STANDARD_VALUE_BG = Color.WHITE;
        float [] aux = Color.RGBtoHSB(249, 56, 34, null);                
        private final Color ABSENT_VALUE_BG = Color.getHSBColor(aux[0], aux[1], aux[2]);
        private final Color ABSENT_VALUE_FG = Color.WHITE;
        
        @Override
        public Component getListCellRendererComponent(JList<?> list,
            Object value, int index, boolean isSelected, boolean cellHasFocus) {
            
            Component superRenderer = super.getListCellRendererComponent(list, value, index, isSelected,
               cellHasFocus);
            
            final EchipaDTO selected = (EchipaDTO) value;
            
            setBackground(STANDARD_VALUE_BG);
            setForeground(STANDARD_VALUE_FG);
            
            if (!echipe.contains(selected)) {
                setBackground(HIGH_VALUE_BG);
                setForeground(HIGH_VALUE_FG);
            }
            
            for (EchipaDB edb : echipeAbsente) {
                if (edb.getIdEchipa() == selected.getId()) {
                    setBackground(ABSENT_VALUE_BG);
                    setForeground(ABSENT_VALUE_FG);
                }
            } 
            
            return superRenderer;
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
