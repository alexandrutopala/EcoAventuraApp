/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import service.SerializeController;

/**
 *
 * @author Alexandru
 */
public class ConsoleFrame extends javax.swing.JFrame {
    private final static String CLASS_ID = "ConsoleFrame";
    
    // configs ids
    private final static String SAVE_BEFORE_EXIT_ID = "jCheckBoxMenuItem1";
    
    private final static String PATH = "./Logs";
    private final static String EXCEPTIONS_PATH = PATH + "/Exceptions";
    private static ConsoleFrame singleton;
    private HashMap<String, Object> classConfigs;
    /**
     * Creates new form ConsoleFrame
     */
    private ConsoleFrame() {
        super ("Consola");
        initComponents();
        
        loadConfigs();
        
        setLocationRelativeTo(null);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }
    
    public final void loadConfigs () {
        try {
            classConfigs = (HashMap<String, Object>) SerializeController.getInstance().readCongif(CLASS_ID);
            boolean isSelected = (Boolean) classConfigs.get(SAVE_BEFORE_EXIT_ID);
            jCheckBoxMenuItem1.setSelected(isSelected);
        } catch (Exception e) {
        }
    }
    
    public final void saveConfigs () {
        if (classConfigs == null) classConfigs = new HashMap<>();
        classConfigs.put(SAVE_BEFORE_EXIT_ID, jCheckBoxMenuItem1.isSelected());
        SerializeController.getInstance().writeConfig(CLASS_ID, classConfigs);
    }
    
    public JTextArea getTextAreaOut () {
        return jTextArea1;
    }
    
    public JTextArea getTextAreaErr () {
        return jTextArea2;
    }
    
    public static ConsoleFrame getInstance () {
        if (singleton == null) {
            singleton = new ConsoleFrame();
        }
        return singleton;
    }
    
    public static boolean isExistingInstance () {
        return (singleton != null);
    }
    
    public final void saveReport () {
        if (!jCheckBoxMenuItem1.isSelected()) return;
        if (jTextArea2.getText() == null) return;
        if (jTextArea2.getText().equals("")) return;
        
        String title = "EXCEPTION_LOG_" + new SimpleDateFormat("ddMMyyyy_HHmm").format(Calendar.getInstance().getTime());
        
        File exceptionsFolder = new File(EXCEPTIONS_PATH);
        if (!exceptionsFolder.exists()){
            exceptionsFolder.mkdir();
        }
            
        try {
            FileOutputStream fout = new FileOutputStream(new File(EXCEPTIONS_PATH + "/" +title + ".txt"));
            try (OutputStreamWriter writer = new OutputStreamWriter(fout)) {
                writer.write(jTextArea2.getText() + "\n");
                writer.flush();
                writer.close();
            }
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ConsoleFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Cale invalida. Fisierul nu a putut fi salvat.", "", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(ConsoleFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jSplitPane1.setDividerLocation(190);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jSplitPane1.setLeftComponent(jScrollPane2);

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        jTextArea2.setForeground(new java.awt.Color(204, 0, 0));
        jTextArea2.setRows(5);
        jScrollPane3.setViewportView(jTextArea2);

        jSplitPane1.setRightComponent(jScrollPane3);

        jMenu1.setText("Optiuni");

        jMenuItem1.setText("Salveaza");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("Salvare automata la iesire");
        jMenu1.add(jCheckBoxMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 926, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        File file = new File(PATH);
        if (!file.exists()) {
            if(!file.mkdir()) {
                JOptionPane.showMessageDialog(this, "Fisierul nu a putut fi creat. Verifica permisiunile.", "Acces interzis", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        String title = "LOG_" + new SimpleDateFormat("ddMMyyyy_HHmm").format(Calendar.getInstance().getTime());
        title = JOptionPane.showInputDialog(this, "Modifica numele fisierului", title);
        if (title == null || title.equals("")) {
            JOptionPane.showMessageDialog(this, "Titlu invalid. Fisierul nu a putut fi salvat.", "", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            FileOutputStream fout = new FileOutputStream(new File(PATH + "/" +title + ".txt"));
            OutputStreamWriter writer = new OutputStreamWriter(fout);
            writer.write(jTextArea1.getText() + "\n");
            writer.write(jTextArea2.getText() + "\n");
            writer.flush();
            writer.close();
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ConsoleFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Cale invalida. Fisierul nu a putut fi salvat.", "", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(ConsoleFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        saveConfigs();
    }//GEN-LAST:event_formWindowClosing

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
