/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import dialogs.PermissionFrame;
import dto.ActivitateDTO;
import dto.JocDTO;
import dto.UserDTO;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import server.ServerFrame;

/**
 *
 * @author Alexandru
 */
public class OrderFrame extends javax.swing.JFrame {
    private final static int LIST_WIDTH = 274;
    private List<ActivitateDTO> activitati;
    private List<JocDTO> jocuri;
    private DefaultListModel<String> sarcini;
    private int selectedIndex;
    private boolean needSelect;
    private HashMap<String, Object> map;
    /**
     * Creates new form OrderFrame
     * @param activitati
     * @param jocuri
     */
    public OrderFrame(List<ActivitateDTO> activitati, List<JocDTO> jocuri) {
        super ("Ordoneaza sarcini");
        initComponents();
        this.activitati = activitati;
        this.jocuri = jocuri;
        
        sarcini = new DefaultListModel<>();
        map = new HashMap<>();
        
        int totalSarcini = (activitati != null ? activitati.size() : 0) + (jocuri != null ? jocuri.size() : 0);
        for (int i = 0; i < totalSarcini; ++i) {
            sarcini.addElement("");
        }
        
        if (activitati != null) {
            for (ActivitateDTO a : activitati){
                sarcini.removeElementAt(a.getOrdin());
                sarcini.add(a.getOrdin(), a.toString());
                map.put(a.toString(), a);
            }
        }
        
        if (jocuri != null) {
            for (JocDTO j : jocuri) {
                sarcini.removeElementAt(j.getOrdin());
                sarcini.add(j.getOrdin(), j.toString());
                map.put(j.toString(), j);
            }
        }
        
        KeyListener [] listeners = jList1.getKeyListeners();
        for (int i = 0; i < listeners.length; ++i) {
            jList1.removeKeyListener(listeners[i]);
        } 
        
        jList1.addKeyListener(new KeyAdapter () {
            @Override
            public void keyTyped(KeyEvent ke) {
                //super.keyTyped(ke); //To change body of generated methods, choose Tools | Templates.
                jList1KeyTyped(ke);
            }            
        });
        
        jList1.setFixedCellWidth(LIST_WIDTH);
        jList1.setModel(sarcini);
        jList1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
        
        setResizable(false);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jList1MouseEntered(evt);
            }
        });
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jList1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jList1KeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jButton1.setText("Posteaza>>");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Salveaza");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jList1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jList1KeyTyped
        final int index = jList1.getSelectedIndex();
        
        if (index == -1) return; 
        String a = sarcini.get(index);
        
        if (evt.getKeyChar() == KeyEvent.VK_W + 32) {
            if (index > 0) {
                if (sarcini.removeElement(a)) {
                    sarcini.add(index-1, a);
                    jList1.setSelectedIndex(index-1);
                    selectedIndex = index-1;
                    needSelect = true;
                }
            }
        } else if (evt.getKeyChar() == KeyEvent.VK_S + 32) {
            if (index < sarcini.size() - 1) {
                if (sarcini.removeElement(a)){
                    sarcini.add(index+1, a);
                    jList1.setSelectedIndex(index+1);
                    selectedIndex = index+1;
                    needSelect = true;
                }
            }
        }
        
        jList1.setModel(sarcini);
    }//GEN-LAST:event_jList1KeyTyped

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        if (needSelect){
            jList1.setSelectedIndex(selectedIndex);
            needSelect = false;
        }
    }//GEN-LAST:event_jList1ValueChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        List<ActivitateDTO> activitati = new ArrayList<>();
        List<JocDTO> jocuri = new ArrayList<>();
    
        PermissionFrame perm = new PermissionFrame(this, true, "Aprobare distribuire activitati : ", UserDTO.ACCES_COORDONATOR);
        if (!perm.isApproved()) {
            JOptionPane.showMessageDialog(this, "Respins", "Acces refuzat", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        for (int i = 0; i < sarcini.size(); ++i) {
            String o = sarcini.get(i);
            if (map.get(o).getClass() == ActivitateDTO.class) {
                ((ActivitateDTO) map.get(o)).setOrdin(i);
                activitati.add((ActivitateDTO) map.get(o));
            } else {
                ((JocDTO) map.get(o)).setOrdin(i);
                jocuri.add((JocDTO) map.get(o));
            }
        }
        
        
        SerieActivaFrame.posteazaProgram(activitati, jocuri, false);
        ServerFrame.getInstance().setPackage(activitati, jocuri);
        ServerFrame.getInstance().shareActivities();
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        List<ActivitateDTO> activitati = new ArrayList<>();
        List<JocDTO> jocuri = new ArrayList<>();
        
        for (int i = 0; i < sarcini.size(); ++i) {
            String o = sarcini.get(i);
            if (map.get(o).getClass() == ActivitateDTO.class) {
                ((ActivitateDTO) map.get(o)).setOrdin(i);
                activitati.add((ActivitateDTO) map.get(o));
            } else {
                ((JocDTO) map.get(o)).setOrdin(i);
                jocuri.add((JocDTO) map.get(o));
            }
        }
        ServerFrame.getInstance().setPackage(activitati, jocuri);
        SerieActivaFrame.posteazaProgram(activitati, jocuri, false);
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jList1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseEntered
        HelperFrame.getInstance().post(
                "Lista activitatilor ordonate",
                "Aici se pot reordona toate activitatile din planul in desfasurare. Pentru a plasa activitatea selectata pe alta pozitite, "
                        + "se pot folosi tastele 'W' (sus) si 'S' (jos). Dupa ce ai terminat, poti salva noua ordine, sau o poti posta, "
                        + "pentru a notifica animatorii despre modificarile facute.\n"
                        + "DE RETINUT: ordinea activitatilor din lista se aplica tuturor animatorulor care NU au"
                        + " o ordine particulara stabilita. ");
    }//GEN-LAST:event_jList1MouseEntered


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
