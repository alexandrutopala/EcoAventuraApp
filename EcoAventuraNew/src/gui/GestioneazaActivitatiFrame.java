/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import db.ActivitateGeneralaDB;
import db.AnimatorDB;
import db.JocGeneralDB;
import dialogs.DescriereFrame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import observer.KeyObserver;
import service.ControllerDB;
import service.SerializeController;

/**
 *
 * @author Alexandru
 */
public class GestioneazaActivitatiFrame extends javax.swing.JFrame {
    private DefaultListModel<ActivitateGeneralaDB> modelActivitati;
    private DefaultListModel<JocGeneralDB> modelJocuri;
    private JMenuItem formulaJocItem;
    private JMenuItem descriereJocItem;
    /**
     * Creates new form GestioneazaAnimatoriFrame
     */
    public GestioneazaActivitatiFrame() {
        super ("Gestiune Animatori");
        initComponents();
        
        // init models
        
        modelActivitati = new DefaultListModel<>();
        modelJocuri = new DefaultListModel<>();
        
        modelActivitati.clear();
        modelJocuri.clear();
        
        List<ActivitateGeneralaDB> activitati = ControllerDB.getInstance().getAllActivitatiGenerale();
        List<JocGeneralDB> jocuri = ControllerDB.getInstance().getAllJocuriGenerale();
        
        for (ActivitateGeneralaDB a : activitati){
            modelActivitati.addElement(a);
        }
        
        for (JocGeneralDB j : jocuri){
            if (j.getNumeJocGeneral().equals("penalizare")) continue;
            modelJocuri.addElement(j);
        }
        
        jList1.setModel(modelActivitati);
        jList2.setModel(modelJocuri);
        
        // init menu items
        
        jMenuItem1.setText("Editeaza nume");
        jMenuItem2.setText("Sterge");
        
        formulaJocItem = new JMenuItem("Editeaza formula");
        formulaJocItem.addActionListener(
            new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent ae) {
                    try {
                        new FormulaFrame((JocGeneralDB) jList2.getSelectedValue(), false).setVisible(true);
                    } catch (Exception e) {}
                }
            }
        );
        
        descriereJocItem = new JMenuItem("Descriere joc");
        descriereJocItem.addActionListener(
                new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                JocGeneralDB joc = (JocGeneralDB) jList2.getSelectedValue();
                DescriereFrame d = new DescriereFrame(GestioneazaActivitatiFrame.this,
                        "Descriere: " + joc,
                        true,
                        joc.getDescriereJoc());
                
                if (d.isSaved()) {
                    joc.setDescriereJoc(d.getDescriere());
                    ControllerDB.getInstance().editeazaJocGeneral(joc);
                }
            }
        }
        );
        
        setResizable(false);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jButton5 = new javax.swing.JButton();

        jButton1.setText("jButton1");

        jMenuItem1.setText("jMenuItem1");
        jMenuItem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem1MouseClicked(evt);
            }
        });
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        jMenuItem2.setText("jMenuItem2");
        jMenuItem2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem2MouseClicked(evt);
            }
        });
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Activitati");

        jLabel2.setText("Jocuri");

        jButton4.setText("+ Adauga Activitate");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jList1MouseEntered(evt);
            }
        });
        jScrollPane3.setViewportView(jList1);

        jList2.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList2MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jList2MouseEntered(evt);
            }
        });
        jScrollPane4.setViewportView(jList2);

        jButton5.setText("+ Adauga Joc");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(77, 77, 77)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane4)
                    .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(16, 16, 16)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        String nume = JOptionPane.showInputDialog(this, "Introdu numele activitatii :");
        
        if (nume.length() >= KeyObserver.STANDARD_LENGHT) {
            JOptionPane.showMessageDialog(this, "Limita de " + KeyObserver.STANDARD_LENGHT + " a fost depasita" , "Limita depasita", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        ActivitateGeneralaDB a = ControllerDB.getInstance().adaugaActivitateGenerala(nume);
        
        if (a != null) {
            modelActivitati.addElement(a);
            jList1.setModel(modelActivitati);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jMenuItem1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem1MouseClicked
        
        
    }//GEN-LAST:event_jMenuItem1MouseClicked

    private void jMenuItem2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem2MouseClicked
        try {
            if (SerieActivaFrame.isExistingRunningProgram()) {
                JOptionPane.showMessageDialog(this, "Activitatile nu se pot modifica cat timp sunt distribuite");
                return;
            }
        } catch (NullPointerException ex ) {
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Activitatile nu se pot modifica cat timp sunt distribuite");
            return;
        }
        
        JList list = (JList) jPopupMenu1.getInvoker();
        AnimatorDB a  = (AnimatorDB) list.getSelectedValue();
        
        boolean rez = ControllerDB.getInstance().stergeAnimator(a);
        
        if (rez) {
            if (a.getDisponibilAnimator()) {
                modelActivitati.removeElement(a);
                jList1.setModel(modelActivitati);
            } else {
                modelJocuri.removeElement(a);
                jList2.setModel(modelJocuri);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Animatorul " + a.getNumeAnimator() + " nu a putut fi eliminat");
        }
    }//GEN-LAST:event_jMenuItem2MouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        try {
            if (SerieActivaFrame.isExistingRunningProgram()) {
                JOptionPane.showMessageDialog(this, "Activitatile nu se pot modifica cat timp sunt distribuite");
                return;
            }
        } catch (NullPointerException e) {
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Activitatile nu se pot modifica cat timp sunt distribuite");
            return;
        }
        
        JList list = (JList) jPopupMenu1.getInvoker();
        
        if (list == jList1) {
            ActivitateGeneralaDB a  = (ActivitateGeneralaDB) list.getSelectedValue();
            if (a == null) return;
            String nume = JOptionPane.showInputDialog(this, "Introdu noul nume :", a.getNumeActivitateGenerala());
            if (nume.equals("")){
                return;
            }

            String oldNume = a.getNumeActivitateGenerala();
            a.setNumeActivitateGenerala(nume);
            boolean rez = ControllerDB.getInstance().editeazaActivitateGenerala(a);

            if (rez) {
                a.setNumeActivitateGenerala(oldNume);
                modelActivitati.removeElement(a);
                a.setNumeActivitateGenerala(nume);
                modelActivitati.addElement(a);
            }
        } else if (list == jList2){
            JocGeneralDB j = (JocGeneralDB) list.getSelectedValue();
            if (j == null) return;
            
            JocGeneralDB old = new JocGeneralDB(j.getIdJocGeneral());
            old.setJocDBCollection(j.getJocDBCollection());
            old.setNumeJocGeneral(j.getNumeJocGeneral());
            
            String nume = JOptionPane.showInputDialog(this, "Introdu noul nume :", j.getNumeJocGeneral());
            if (nume.equals("")) return;
            
            String oldname = j.getNumeJocGeneral();
            j.setNumeJocGeneral(nume);
            
            boolean rez = ControllerDB.getInstance().editeazaJocGeneral(j);
            
            if (rez) {
                j.setNumeJocGeneral(oldname);
                modelJocuri.removeElement(j);
                j.setNumeJocGeneral(nume);
                modelJocuri.addElement(j);
                SerializeController.getInstance().updateFormula(j, old);
            }
        }

        jList1.setModel(modelActivitati);
        jList2.setModel(modelJocuri);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        int opt = JOptionPane.showConfirmDialog(this, "Activitatile/Jocurile selectate vor fi sterse si din istoricul de activitati al tuturor echipelor. Continui?", "Avertisment", JOptionPane.WARNING_MESSAGE, JOptionPane.YES_NO_OPTION);
        if (opt == JOptionPane.NO_OPTION) return;
        
        if (SerieActivaFrame.isExistingRunningProgram())
                if (JOptionPane.showConfirmDialog(this, "Aceasta modificare va duce la pierderea intregului program. Sigur mergeti mai departe?", "", JOptionPane.YES_NO_OPTION) 
                == JOptionPane.NO_OPTION){
                    return;
        }
        
        JList list = (JList) jPopupMenu1.getInvoker();
        
        if (list == jList1) {
            int [] indexes = jList1.getSelectedIndices();
            
            for (int i = indexes.length - 1; i >= 0; --i) {
                ActivitateGeneralaDB a = (ActivitateGeneralaDB) modelActivitati.get(indexes[i]);
                boolean rez = ControllerDB.getInstance().stergeActivitateGenerala(a);

                if (rez) {
                    modelActivitati.removeElement(a);
                    SerializeController.getInstance().setCanReadPosteazaFrame(false);
                    SerializeController.getInstance().setCanReadSerieActivaFrame(false);
                    SerieActivaFrame.refreshFrame();
                }
            }
        } else if (list == jList2) {
            int [] indexes = jList2.getSelectedIndices();
            
            for (int i = indexes.length - 1; i >= 0; --i) {
                JocGeneralDB j = (JocGeneralDB) modelJocuri.get(indexes[i]);
                boolean rez = ControllerDB.getInstance().stergeJocGeneral(j);

                if (rez) {
                    modelJocuri.removeElement(j);
                    SerializeController.getInstance().setCanReadPosteazaFrame(false);
                    SerializeController.getInstance().setCanReadSerieActivaFrame(false);
                    SerieActivaFrame.refreshFrame();
                }       
            }
        }
        
        jList1.setModel(modelActivitati);
        jList2.setModel(modelJocuri);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        if (jList1.getSelectedValue() != null && evt.getButton() == MouseEvent.BUTTON3){
            jPopupMenu1.remove(formulaJocItem);
            jPopupMenu1.remove(descriereJocItem);
            jPopupMenu1.show(jList1, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jList1MouseClicked

    private void jList2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList2MouseClicked
        if (jList2.getSelectedValue() != null && evt.getButton() == MouseEvent.BUTTON3){
            jPopupMenu1.add(formulaJocItem);
            jPopupMenu1.add(descriereJocItem);
            jPopupMenu1.show(jList2, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jList2MouseClicked

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        String nume = JOptionPane.showInputDialog(this, "Introdu numele jocului : ");
        
        if (nume.length() >= KeyObserver.STANDARD_LENGHT) {
            JOptionPane.showMessageDialog(this, "Limita de " + KeyObserver.STANDARD_LENGHT + " a fost depasita" , "Limita depasita", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        DescriereFrame d = new DescriereFrame(this, "Joc: " + nume, true, "");
        
        JocGeneralDB j = ControllerDB.getInstance().adaugaJocGeneral(nume, d.getDescriere());
        
        if (j != null) {
            new FormulaFrame(j, true).setVisible(true);
            modelJocuri.addElement(j);
            jList2.setModel(modelJocuri);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jList1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseEntered
        HelperFrame.getInstance().post(
                "Lista activitatilor generale",
                "Click dreapta pentru mai multe optiuni.");
    }//GEN-LAST:event_jList1MouseEntered

    private void jList2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList2MouseEntered
        HelperFrame.getInstance().post(
                "Lista jocurilor generale",
                "Click dreapta pentru mai multe informatii.");
    }//GEN-LAST:event_jList2MouseEntered

    public void adaugaActivitate (ActivitateGeneralaDB a){
        modelActivitati.addElement(a);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    // End of variables declaration//GEN-END:variables
}
